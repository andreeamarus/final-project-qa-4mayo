{
  "stats": {
    "suites": 5,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-31T14:42:46.549Z",
    "end": "2023-05-31T14:42:56.605Z",
    "duration": 10056,
    "testsRegistered": 15,
    "passPercent": 93.33333333333333,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "a7604596-b198-47d6-bfe8-b01c90823f2d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": " Hard coded - get all notes test",
          "fullTitle": " Hard coded - get all notes test",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await spec()\n  .get(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\":\n      \"f7b97144266a43408f8b68023d8156196d574884a4dc4ee78917e69b31adf8c2\",\n  })\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(getAllNoteSchema)\n  .expectJsonLike({ message: \"Notes successfully retrieved\" });",
          "err": {},
          "uuid": "86cd615e-545d-43a3-95f0-4155ba4800fc",
          "parentUUID": "a7604596-b198-47d6-bfe8-b01c90823f2d",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "ef1a1f77-4f3b-4c98-9a02-42a096c225d4",
          "title": "Delete post by id test suite",
          "fullFile": "/home/andreea/Personal projects/4MAYO/Automation-Testing-Project/api_tests/delete-note-by-id.test.js",
          "file": "/api_tests/delete-note-by-id.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete post by id test suite\"",
              "fullTitle": "Delete post by id test suite \"before all\" hook in \"Delete post by id test suite\"",
              "timedOut": false,
              "duration": 1815,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultTimeout(5000);\n// register user\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(registerBody)\n  .expectStatus(201)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserSchema);\n// user login\nconst login = await spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(loginBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postLogInSchema)\n  .expectJsonLike({ message: \"Login successful\" });\ntoken = login.body.data.token;\n// create new note\nconst createdNote = await spec()\n  .post(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": token,\n  })\n  .withBody(requestBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postCreateNoteSchema)\n  .expectJsonLike({ message: \"Note successfully created\" });\nnoteId = createdNote.body.data.id;",
              "err": {},
              "uuid": "097d2b18-a308-456e-8a67-8433b3d00a81",
              "parentUUID": "ef1a1f77-4f3b-4c98-9a02-42a096c225d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete post test",
              "fullTitle": "Delete post by id test suite Delete post test",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .delete(`${baseUrl}/notes/${noteId}`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": `${token}`,\n  })\n  .expectJsonLike({ message: \"Note successfully deleted\" })\n  .expectStatus(200);",
              "err": {},
              "uuid": "78a25204-3cc8-4a23-85b1-d8b0dbe0826c",
              "parentUUID": "ef1a1f77-4f3b-4c98-9a02-42a096c225d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78a25204-3cc8-4a23-85b1-d8b0dbe0826c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3088c104-0819-46a3-9be4-6a22d66f8d95",
          "title": "Get all notes test suite",
          "fullFile": "/home/andreea/Personal projects/4MAYO/Automation-Testing-Project/api_tests/get-all-notes.test.js",
          "file": "/api_tests/get-all-notes.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get all notes test suite\"",
              "fullTitle": "Get all notes test suite \"before all\" hook in \"Get all notes test suite\"",
              "timedOut": false,
              "duration": 1953,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultTimeout(5000);\n// register user\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(registerBody)\n  .expectStatus(201)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserSchema);\n// user login\nconst login = await spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(loginBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postLogInSchema)\n  .expectJsonLike({ message: \"Login successful\" });\ntoken = login.body.data.token;\n// try get notes before creating\nawait spec()\n  .get(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": token,\n  })\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(getAllNoteSchema)\n  .expectJsonLike({ message: \"No notes found\" });\n// create note\nawait spec()\n  .post(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": token,\n  })\n  .withBody(requestBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postCreateNoteSchema)\n  .expectJsonLike({ message: \"Note successfully created\" });",
              "err": {},
              "uuid": "f18a323d-c32b-442d-b567-735b5bed2080",
              "parentUUID": "3088c104-0819-46a3-9be4-6a22d66f8d95",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get all notes test",
              "fullTitle": "Get all notes test suite Get all notes test",
              "timedOut": false,
              "duration": 296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .get(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": token,\n  })\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(getAllNoteSchema)\n  .expectJsonLike({ message: \"Notes successfully retrieved\" });",
              "err": {},
              "uuid": "fb7f0379-3140-4a06-a442-95f274ccc090",
              "parentUUID": "3088c104-0819-46a3-9be4-6a22d66f8d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all notes - no authentication token - test",
              "fullTitle": "Get all notes test suite Get all notes - no authentication token - test",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .get(`${baseUrl}/notes`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .expectStatus(401)\n  .expectResponseTime(5000)\n  .expectJsonSchema(getAllNoteErrorSchema)\n  .expectJsonLike({\n    message: \"No authentication token specified in x-auth-token header\",\n  });\n// hard coded\nit(\" Hard coded - get all notes test\", async () => {\n  await spec()\n    .get(`${baseUrl}/notes`)\n    .withHeaders({\n      \"Content-Type\": \"application/json\",\n      \"x-auth-token\":\n        \"f7b97144266a43408f8b68023d8156196d574884a4dc4ee78917e69b31adf8c2\",\n    })\n    .expectStatus(200)\n    .expectResponseTime(5000)\n    .expectJsonSchema(getAllNoteSchema)\n    .expectJsonLike({ message: \"Notes successfully retrieved\" });\n});",
              "err": {},
              "uuid": "29a57a15-e0c7-4727-a827-a080c0e9104c",
              "parentUUID": "3088c104-0819-46a3-9be4-6a22d66f8d95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb7f0379-3140-4a06-a442-95f274ccc090",
            "29a57a15-e0c7-4727-a827-a080c0e9104c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 367,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "4451798c-f4c3-4058-9598-798807928df5",
          "title": "Create new note test suite",
          "fullFile": "/home/andreea/Personal projects/4MAYO/Automation-Testing-Project/api_tests/post-create-new-note.test.js",
          "file": "/api_tests/post-create-new-note.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create new note test suite\"",
              "fullTitle": "Create new note test suite \"before all\" hook in \"Create new note test suite\"",
              "timedOut": false,
              "duration": 954,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultTimeout(5000);\n// register user\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(registerBody)\n  .expectStatus(201)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserSchema);\n// user login\nconst login = await spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(loginBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postLogInSchema)\n  .expectJsonLike({ message: \"Login successful\" });\ntoken = login.body.data.token;",
              "err": {},
              "uuid": "61152ca9-ccf7-41c4-b8ab-b7e5c8c88eeb",
              "parentUUID": "4451798c-f4c3-4058-9598-798807928df5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create new note test",
              "fullTitle": "Create new note test suite Create new note test",
              "timedOut": false,
              "duration": 1333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .post(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\": token,\n  })\n  .withBody(requestBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postCreateNoteSchema)\n  .expectJsonLike({ message: \"Note successfully created\" });",
              "err": {},
              "uuid": "c4024650-7e0f-4ce3-9c83-35991b185ea6",
              "parentUUID": "4451798c-f4c3-4058-9598-798807928df5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hard coding create new note test",
              "fullTitle": "Create new note test suite Hard coding create new note test",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .post(`${baseUrl}/notes`)\n  .withHeaders({\n    \"Content-Type\": \"application/json\",\n    \"x-auth-token\":\n      \"f7b97144266a43408f8b68023d8156196d574884a4dc4ee78917e69b31adf8c2\",\n  })\n  .withBody(requestBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postCreateNoteSchema)\n  .expectJsonLike({ message: \"Note successfully created\" });",
              "err": {},
              "uuid": "7e3c0711-50cb-4277-997f-fdfd3f55d64f",
              "parentUUID": "4451798c-f4c3-4058-9598-798807928df5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new note - no authentication token - test",
              "fullTitle": "Create new note test suite Create new note - no authentication token - test",
              "timedOut": false,
              "duration": 475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .post(`${baseUrl}/notes`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(401)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postErrorCreateNoteSchema)\n  .expectJsonLike({\n    message: \"No authentication token specified in x-auth-token header\",\n  });",
              "err": {},
              "uuid": "f370980b-0814-4ae4-8c50-12564646fd2d",
              "parentUUID": "4451798c-f4c3-4058-9598-798807928df5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4024650-7e0f-4ce3-9c83-35991b185ea6",
            "7e3c0711-50cb-4277-997f-fdfd3f55d64f",
            "f370980b-0814-4ae4-8c50-12564646fd2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2216,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "234d2c2f-661f-4455-8963-a1cea6525de1",
          "title": "Login  user endpoint test suite",
          "fullFile": "/home/andreea/Personal projects/4MAYO/Automation-Testing-Project/api_tests/post-login-user.test.js",
          "file": "/api_tests/post-login-user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Login  user endpoint test suite\"",
              "fullTitle": "Login  user endpoint test suite \"before all\" hook in \"Login  user endpoint test suite\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultTimeout(5000);",
              "err": {},
              "uuid": "b324e7da-be68-430e-8d4a-308f92be7cbb",
              "parentUUID": "234d2c2f-661f-4455-8963-a1cea6525de1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "successful register user test",
              "fullTitle": "Login  user endpoint test suite successful register user test",
              "timedOut": false,
              "duration": 442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(registerBody)\n  .expectStatus(201)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserSchema)\n  .expectJsonLike({ message: \"User account created successfully\" });",
              "err": {},
              "uuid": "a38b6084-5bf9-42af-b1cf-7d03bac686a8",
              "parentUUID": "234d2c2f-661f-4455-8963-a1cea6525de1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "succesful login user test",
              "fullTitle": "Login  user endpoint test suite succesful login user test",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(loginBody)\n  .expectStatus(200)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postLogInSchema)\n  .expectJsonLike({ message: \"Login successful\" });",
              "err": {},
              "uuid": "129acc50-52bf-41be-a719-8ebfba25d66b",
              "parentUUID": "234d2c2f-661f-4455-8963-a1cea6525de1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccesful login user - unregistered user - test",
              "fullTitle": "Login  user endpoint test suite unsuccesful login user - unregistered user - test",
              "timedOut": false,
              "duration": 273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unregisteredUserBody = {\n  email: faker.internet.email(),\n  password: faker.internet.password(),\n};\nawait spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(unregisteredUserBody)\n  .expectStatus(401)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postErrorLogInSchema)\n  .expectJsonLike({ message: \"Incorrect email address or password\" });",
              "err": {},
              "uuid": "bf4f04d6-ee64-4d51-b5c8-da22247f0083",
              "parentUUID": "234d2c2f-661f-4455-8963-a1cea6525de1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccesful login user - no password - test",
              "fullTitle": "Login  user endpoint test suite unsuccesful login user - no password - test",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  email: loginBody.email,\n};\nawait spec()\n  .post(`${baseUrl}/users/login`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(400)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postErrorLogInSchema)\n  .expectJsonLike({\n    message: \"Password must be between 6 and 30 characters\",\n  });",
              "err": {},
              "uuid": "dccefef4-6a73-4cee-ad1a-ea54ae8d4efb",
              "parentUUID": "234d2c2f-661f-4455-8963-a1cea6525de1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a38b6084-5bf9-42af-b1cf-7d03bac686a8",
            "129acc50-52bf-41be-a719-8ebfba25d66b",
            "bf4f04d6-ee64-4d51-b5c8-da22247f0083",
            "dccefef4-6a73-4cee-ad1a-ea54ae8d4efb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1400,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
          "title": "Register user endpoint test suite",
          "fullFile": "/home/andreea/Personal projects/4MAYO/Automation-Testing-Project/api_tests/post-register-user.test.js",
          "file": "/api_tests/post-register-user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Register user endpoint test suite\"",
              "fullTitle": "Register user endpoint test suite \"before all\" hook in \"Register user endpoint test suite\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.setDefaultTimeout(5000);",
              "err": {},
              "uuid": "906dd434-1e1c-47c5-bc6c-1b28e6aeaf85",
              "parentUUID": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "successful register user test",
              "fullTitle": "Register user endpoint test suite successful register user test",
              "timedOut": false,
              "duration": 362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  name: randomName,\n  email: randomEmail,\n  password: password,\n};\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(201)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserSchema);",
              "err": {},
              "uuid": "dba8723b-0ab1-4209-838d-2e0c97d0d618",
              "parentUUID": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessful register user - invalid username - test",
              "fullTitle": "Register user endpoint test suite unsuccessful register user - invalid username - test",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  email: randomEmail,\n  password: password,\n};\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(400)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserErrorSchema)\n  .expectJsonLike({\n    message: \"User name must be between 4 and 30 characters\",\n  });",
              "err": {},
              "uuid": "b1f2f08a-8ae0-436e-b46d-a92f810f5984",
              "parentUUID": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessful register user - password too short test",
              "fullTitle": "Register user endpoint test suite unsuccessful register user - password too short test",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  name: randomName,\n  email: randomEmail,\n  password: \"short\",\n};\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(400)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserErrorSchema);",
              "err": {},
              "uuid": "d97a1988-db9d-4ed4-9f82-06e845ecd8b9",
              "parentUUID": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessful register user - invalid email - test",
              "fullTitle": "Register user endpoint test suite unsuccessful register user - invalid email - test",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  name: randomName,\n  email: \"testing.com\",\n  password: password,\n};\nawait spec()\n  .post(`${baseUrl}/users/register`)\n  .withHeaders(\"Content-Type\", \"application/json\")\n  .withBody(requestBody)\n  .expectStatus(400)\n  .expectResponseTime(5000)\n  .expectJsonSchema(postRegisterUserErrorSchema);",
              "err": {},
              "uuid": "afb535a0-e54d-478e-bb68-d53e772fa1a2",
              "parentUUID": "ac122ddb-3b5f-41c2-8967-f6f0674171cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dba8723b-0ab1-4209-838d-2e0c97d0d618",
            "b1f2f08a-8ae0-436e-b46d-a92f810f5984",
            "d97a1988-db9d-4ed4-9f82-06e845ecd8b9",
            "afb535a0-e54d-478e-bb68-d53e772fa1a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 777,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "86cd615e-545d-43a3-95f0-4155ba4800fc"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-tests-results",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "reportFilename": "api-tests-results"
      },
      "version": "6.2.0"
    }
  }
}